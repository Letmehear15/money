{"version":3,"sources":["types.ts","utils/localStorage.ts","components/dayInfo/MoneyTillPayday.tsx","components/dayInfo/SpentMoneyPerDay.tsx","utils/helper.ts","components/Loading.tsx","components/dayInfo/DayInfo.tsx","components/setupComponents/DatePicker.tsx","components/setupComponents/Money.tsx","components/setupComponents/SetupComponents.tsx","components/SettingButton.tsx","assets/ru.png","components/LanguageIcons/RussianIcon.tsx","assets/en.png","components/LanguageIcons/EnglishIcon.tsx","components/TranslationProvider.tsx","ColorThemeProvider.tsx","components/dialog/DialogModal.tsx","App.tsx","components/hooks/useToggleDialog.ts","serviceWorkerRegistration.ts","index.tsx"],"names":["Languages","getMoneyFromLocalstorage","money","localStorage","getItem","Number","saveMoneyToLocalstorage","setItem","String","getPaydayDate","payday","Date","MoneyTillPayday","moneyTillPayday","daysTillPayday","totalMoney","Box","display","flexDirection","Typography","align","variant","marginTop","id","description","defaultMessage","SpentMoneyPerDay","setSpentMoney","spentMoney","onApplyMoney","marginBottom","TextField","label","type","onChange","e","value","target","inputProps","inputMode","pattern","min","Button","style","size","endIcon","onClick","disabled","Boolean","dateDiffInDays","a","b","utc1","UTC","getFullYear","getMonth","getDate","utc2","Math","floor","calcMoneyPerDay","todayDate","payDate","moneyTillpayday","diffInDays","Loading","DayInfo","React","useState","setMoneyTillPayday","getDaysTillPayday","useEffect","undefined","alignItems","PickerPayloadDate","setPayday","setValidateError","date","okText","cancelText","clearText","clearable","onError","res","disableHighlightToday","renderInput","params","fullWidth","required","Money","setMoney","SetupComponents","setIsSetup","validateError","disabledStartButton","margin","color","SettingButton","setOpen","RussianIcon","src","ruImage","width","height","alt","EnglishIcon","enImage","TranslationContext","createContext","TranslationProvider","children","languageFromLocalStorage","selectedLanguage","getLanguageFromLocalstorage","setSelectedLanguage","dateLocale","enLocale","ruLocale","LocalizationProvider","dateAdapter","AdapterDateFns","locale","messages","languages","Provider","ThemeContext","toggleColorMode","mode","ColorThemeProvider","themeFromLocalstorage","themeMode","setThemeMode","colorMode","useMemo","theme","createTheme","palette","ThemeProvider","useStyles","makeStyles","root","paddingTop","selectLanguage","selectTheme","DialogModal","open","onResetApp","isSetup","classes","setLagnuage","useContext","onChangeLanguage","lang","language","saveLanguageToLocalstorage","onChangeThemeColor","saveThemeModeToLocalstorage","Dialog","onClose","className","DialogActions","justifyContent","IconButton","DarkMode","fontSize","LightMode","padding","App","initApp","setInitApp","dialog","setDialog","prev","useToggleDialog","Paper","square","removeItem","isLocalhost","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StyledEngineProvider","injectFirst","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"g8FAAYA,E,uFAAAA,K,QAAAA,E,SAAAA,M,KCEL,IAAMC,EAA2B,WACtC,IAAMC,EAAQC,aAAaC,QAAQ,SACnC,OAAIF,EACKG,OAAOH,GAET,MAGII,EAA0B,SAACJ,GAClCA,EACFC,aAAaI,QAAQ,QAASC,OAAON,IAGvCC,aAAaI,QAAQ,QAAS,KAGnBE,EAAgB,WAC3B,IAAMC,EAASP,aAAaC,QAAQ,UACpC,OAAIM,EACK,IAAIC,KAAKD,GAEX,M,yBCZIE,EAAkD,SAAC,GAIzD,IAHLC,EAGI,EAHJA,gBACAC,EAEI,EAFJA,eACAC,EACI,EADJA,WAEA,OACE,qCACE,eAACC,EAAA,EAAD,CAAKC,QAAQ,OAAOC,cAAc,SAAlC,UACGH,GACC,qCACE,cAACI,EAAA,EAAD,CAAYC,MAAM,SAASC,QAAQ,KAAKC,UAAW,EAAnD,SACE,cAAC,IAAD,CACEC,GAAG,cACHC,YAAY,wBACZC,eAAe,4BAGnB,cAACN,EAAA,EAAD,CAAYC,MAAM,SAASC,QAAQ,KAAnC,SACGN,OAIP,cAACI,EAAA,EAAD,CAAYC,MAAM,SAASC,QAAQ,KAAKC,UAAW,EAAnD,SACE,cAAC,IAAD,CACEC,GAAG,sBACHC,YAAY,uBACZC,eAAe,2BAGnB,cAACN,EAAA,EAAD,CAAYC,MAAM,SAASC,QAAQ,KAAnC,SACGR,OAGL,eAACG,EAAA,EAAD,CAAKC,QAAQ,OAAOC,cAAc,SAAlC,UACE,cAACC,EAAA,EAAD,CAAYC,MAAM,SAASC,QAAQ,KAAKC,UAAW,EAAnD,SACE,cAAC,IAAD,CACEC,GAAG,yBACHC,YAAY,0BACZC,eAAe,8BAGnB,cAACN,EAAA,EAAD,CAAYC,MAAM,SAASC,QAAQ,KAAnC,SACGP,W,oCCzCEY,EAAoD,SAAC,GAI3D,IAHLC,EAGI,EAHJA,cAGI,IAFJC,kBAEI,MAFS,EAET,EADJC,EACI,EADJA,aAMA,OACE,qCACE,cAACV,EAAA,EAAD,CAAYW,aAAc,EAAGR,UAAW,EAAxC,SACE,cAAC,IAAD,CACEC,GAAG,cACHC,YAAY,kCACZC,eAAe,sCAGnB,eAACT,EAAA,EAAD,CAAKC,QAAQ,OAAOC,cAAc,SAAlC,UACE,cAACa,EAAA,EAAD,CACEC,MACE,cAAC,IAAD,CACET,GAAG,mBACHC,YAAY,qBACZC,eAAe,uBAGnBQ,KAAK,SACLC,SAvBmB,SAACC,GAC1B,IAAMC,EAAQD,EAAEE,OAAOD,MACvBT,EAActB,OAAO+B,KAsBfA,MAAOR,GAA0B,GACjCU,WAAY,CACVC,UAAW,UACXC,QAAS,SACTC,IAAK,OAGT,cAACC,EAAA,EAAD,CACEC,MAAO,CAAErB,UAAW,IACpBD,QAAQ,YACRuB,KAAK,QACLC,QAAS,cAAC,IAAD,IACTC,QAASjB,EACTkB,UAAWC,QAAQpB,IAAeA,EAAa,EANjD,SAQE,cAAC,IAAD,CAAkBL,GAAG,mBAAmBE,eAAe,QAAQD,YAAY,mBCtD9E,SAASyB,EAAeC,EAASC,GAEtC,IAAMC,EAAOzC,KAAK0C,IAAIH,EAAEI,cAAeJ,EAAEK,WAAYL,EAAEM,WACjDC,EAAO9C,KAAK0C,IAAIF,EAAEG,cAAeH,EAAEI,WAAYJ,EAAEK,WAEvD,OAAOE,KAAKC,OAAOF,EAAOL,GAAR,OAGb,IASMQ,EAAkB,WAC7B,IAAMC,EAAY,IAAIlD,KAChBmD,EAAUrD,IACVsD,EAAkB9D,IACxB,GAAI6D,GAAWC,EAAiB,CAC9B,IAAMC,EAAaf,EAAeY,EAAWC,GAC7C,OAAOJ,KAAKC,MAAMI,EAAkBC,GAEtC,OAAO,GCxBIC,EAAU,WACrB,OACE,cAAC,IAAD,CACE1C,GAAG,cACHE,eAAe,aACfD,YAAY,iBCML0C,EAAkC,WAAO,IAAD,EACfC,IAAMC,WADS,mBAC5CxC,EAD4C,KAChCD,EADgC,OAELwC,IAAMC,WAFD,mBAE5CvD,EAF4C,KAE3BwD,EAF2B,KAI7CvD,EFRyB,WAC/B,IAAM+C,EAAY,IAAIlD,KAChBmD,EAAUrD,IAChB,OAAIoD,GAAaC,EACRb,EAAeY,EAAWC,GAE5B,EEEgBQ,GACjBvD,EAAad,IAgBnB,OAJAkE,IAAMI,WAAU,WACdF,EAAmBT,OAClB,SAEqBY,IAApB3D,EACK,cAAC,EAAD,IAIP,cAACG,EAAA,EAAD,CAAKC,QAAQ,OAAOC,cAAc,SAASuD,WAAW,SAAtD,SACE,gCACE,cAAC,EAAD,CACE3D,eAAgBA,EAChBD,gBAAiBA,EACjBE,WAAYA,IAEd,cAAC,EAAD,CACEc,aA3Ba,WACnB,IAAMkC,EAAkB9D,IACpB8D,GAAmBnC,IAErBtB,EADkByD,EAAkBnC,GAEpCyC,EAAmBT,KACnBjC,OAAc6C,KAsBV7C,cAAeA,EACfC,WAAYA,U,kBCtCT8C,EAAgD,SAAC,GAIvD,IAHLhE,EAGI,EAHJA,OACAiE,EAEI,EAFJA,UACAC,EACI,EADJA,iBAeA,OACE,qCACE,cAACzD,EAAA,EAAD,CAAYW,aAAc,EAA1B,SACE,cAAC,IAAD,CACEP,GAAG,oBACHC,YAAY,0BACZC,eAAe,gCAGnB,cAAC,IAAD,CACEO,MAAO,cAAC,IAAD,CAAkBT,GAAG,mBAAmBC,YAAY,SAASC,eAAe,WACnFW,MAAO1B,EACPwB,SAzBiB,SAAC2C,GACtBF,EAAUE,IAyBNC,OAAQ,cAAC,IAAD,CAAkBvD,GAAG,sBAAsBC,YAAY,SAASC,eAAe,WACvFsD,WAAW,GACXC,UAAW,cAAC,IAAD,CAAkBzD,GAAG,yBAAyBC,YAAY,QAAQC,eAAe,UAC5FwD,WAAS,EACTC,QA1BU,SAACC,GACXA,GACFP,GAAiB,GAEdO,GACHP,GAAiB,IAsBfQ,uBAAqB,EACrBC,YAAa,SAACC,GAAD,OAAY,cAACvD,EAAA,EAAD,aAAWwD,WAAS,EAACC,UAAQ,GAAKF,WCxCtDG,EAA8B,SAAC,GAAyB,IAAvBvF,EAAsB,EAAtBA,MAAOwF,EAAe,EAAfA,SAKnD,OACE,qCACE,cAACvE,EAAA,EAAD,CAAYW,aAAc,EAAGR,UAAW,EAAxC,SACE,cAAC,IAAD,CACEC,GAAG,kBACHE,eAAe,sCACfD,YAAY,0CAGhB,cAACO,EAAA,EAAD,CACEyD,UAAQ,EACRtD,SAfgB,SAACC,GACrB,IAAMC,EAAQD,EAAEE,OAAOD,MACvBsD,EAASrF,OAAO+B,KAcZA,MAAOlC,GAAgB,GACvB+B,KAAK,SACLD,MACE,cAAC,IAAD,CACET,GAAG,cACHE,eAAe,oBACfD,YAAY,sBAGhB+D,WAAS,EACTjD,WAAY,CACVC,UAAW,UACXC,QAAS,SACTC,IAAK,WCzBFkD,EAAiD,SAAC,GAExD,IADLC,EACI,EADJA,WACI,EACsBzB,IAAMC,SAAiB,GAD7C,mBACGlE,EADH,KACUwF,EADV,OAEsCvB,IAAMC,UAAS,GAFrD,mBAEGyB,EAFH,KAEkBjB,EAFlB,OAGwBT,IAAMC,SAAsB,MAHpD,mBAGG1D,EAHH,KAGWiE,EAHX,KAKEmB,GACH9C,QAAQ9C,IAAUA,EAAQ,IAAM8C,QAAQtC,IAAWmF,EAUtD,OACE,gCACE,cAAC,EAAD,CACElB,UAAWA,EACXjE,OAAQA,EACRkE,iBAAkBA,IAEpB,cAAC,EAAD,CAAOc,SAAUA,EAAUxF,MAAOA,IAClC,cAACwC,EAAA,EAAD,CACEC,MAAO,CAAEoD,OAAQ,OAAQzE,UAAW,GAAIL,QAAS,SACjD+E,MAAM,UACN3E,QAAQ,WACRyB,QApBgB,WREiB,IAAC+B,EQDlC3E,GAASQ,KRCyBmE,EQAVnE,GRE5BP,aAAaI,QAAQ,SAAUC,OAAOqE,IAIxC1E,aAAaI,QAAQ,SAAU,IQL3BD,EAAwBJ,GACxB0F,GAAW,KAiBTL,WAAS,EACTxC,SAAU+C,EANZ,SAQE,cAAC,IAAD,CACEvE,GAAG,eACHE,eAAe,sBACfD,YAAY,8B,kBC1CTyE,EAA8C,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC5D,OACE,cAACxD,EAAA,EAAD,CACEG,QAAS,cAAC,IAAD,IACTF,MAAO,CAAErB,UAAW,IACpB0E,MAAM,OACN3E,QAAQ,WACRkE,WAAS,EACTzC,QAASoD,EANX,SAQE,cAAC,IAAD,CACE3E,GAAG,eACHE,eAAe,WACfD,YAAY,gB,6CCtBL,MAA0B,+BCG5B2E,EAAc,WACvB,OACI,qBAAKC,IAAKC,EAAS1D,MAAO,CAAC2D,MAAO,GAAIC,OAAQ,IAAKC,IAAI,aCLhD,MAA0B,+BCG5BC,EAAc,WACvB,OACI,qBAAKL,IAAKM,EAAS/D,MAAO,CAAC2D,MAAO,GAAIC,OAAQ,IAAKC,IAAI,a,qDCKlDG,EAAqBxC,IAAMyC,eAAmB,eAE9CC,EAAgC,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACxCC,Ed+BmC,WACzC,IAAMC,EAAmB7G,aAAaC,QAAQ,iBAC9C,OAAG4G,EACMhH,EAAUgH,GAGZhH,EAAS,GcrCiBiH,GAD4B,EAEb9C,IAAMC,SACpD2C,GAH2D,mBAEtDC,EAFsD,KAEpCE,EAFoC,KAMvDC,EAAaH,IAAqBhH,EAAS,GAASoH,IAAWC,IAErE,OACE,cAACC,EAAA,EAAD,CAAsBC,YAAaC,IAAgBC,OAAQN,EAA3D,SACE,cAAC,IAAD,CACEM,OAAQT,EACRU,SAAUC,EAAUX,GAFtB,SAIE,cAACL,EAAmBiB,SAApB,CAA6BxF,MAAO8E,EAApC,SACGJ,S,uCCvBEe,GAAe1D,IAAMyC,cAAc,CAC9CkB,gBAAiB,SAACC,OAGPC,GAA+B,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SACvCmB,EfiDO9H,aAAaC,QAAQ,mBAI3B,OetDqD,EAE1B+D,IAAMC,SACtC6D,GAH0D,mBAErDC,EAFqD,KAE1CC,EAF0C,KAMtDC,EAAYjE,IAAMkE,SACtB,iBAAO,CACLP,gBAAiB,SAACC,GAChBI,EAAaJ,OAGjB,IAGIO,EAAQnE,IAAMkE,SAClB,kBACEE,aAAY,CACVC,QAAS,CACPT,KAAMG,OAGZ,CAACA,IAGH,OACE,eAACL,GAAaD,SAAd,CAAuBxF,MAAOgG,EAA9B,UACE,cAACK,GAAA,EAAD,CAAeH,MAAOA,EAAtB,SAA8BxB,IADhC,QCdE4B,GAAYC,aAAW,iBAAO,CAClCC,KAAM,CAAEC,WAAY,IACpBC,eAAgB,CACd7H,QAAS,OACTC,cAAe,SACfuD,WAAY,UAEdsE,YAAa,CACXzH,UAAW,GACXL,QAAS,OACTC,cAAe,SACfuD,WAAY,cAWHuE,GAA0C,SAAC,GAKjD,IAJL9C,EAII,EAJJA,QACA+C,EAGI,EAHJA,KACAC,EAEI,EAFJA,WACAC,EACI,EADJA,QAEMC,EAAUV,KACVW,EAAclF,IAAMmF,WAAW3C,GAC9BmB,EAAmB3D,IAAMmF,WAAWzB,IAApCC,gBAEDyB,EAAmB,SAACC,IhBZc,SAACC,GACzCtJ,aAAaI,QAAQ,gBAAiBkJ,GgBYpCC,CAA2BF,GAC3BH,EAAYG,IAGRG,EAAqB,SAAC5B,IhBJa,SAACA,GAC1C5H,aAAaI,QAAQ,iBAAiBwH,GgBIpC6B,CAA4B7B,GAC5BD,EAAgBC,IAGlB,OACE,eAAC8B,EAAA,EAAD,CAAQZ,KAAMA,EAAMa,QAAS5D,EAASX,WAAS,EAACwE,UAAWX,EAAQR,KAAnE,UACE,cAACzH,EAAA,EAAD,CAAYC,MAAM,SAASC,QAAQ,KAAKwH,WAAY,EAApD,SACE,cAAC,IAAD,CACEtH,GAAG,eACHE,eAAe,WACfD,YAAY,eAGhB,cAACwI,EAAA,EAAD,CAAerH,MAAO,CAAEsH,eAAgB,SAAU3I,UAAW,IAA7D,SACE,eAACN,EAAA,EAAD,CAAKC,QAAQ,OAAOC,cAAc,SAAlC,UACE,sBAAK6I,UAAWX,EAAQN,eAAxB,UACE,cAAC3H,EAAA,EAAD,CAAYE,QAAQ,KAApB,SACE,cAAC,IAAD,CACEE,GAAG,eACHE,eAAe,kBACfD,YAAY,sBAGhB,gCACE,cAAC0I,EAAA,EAAD,CAAYpH,QAAS,kBAAMyG,EAAiBvJ,EAAS,KAArD,SACE,cAAC,EAAD,MAEF,cAACkK,EAAA,EAAD,CAAYpH,QAAS,kBAAMyG,EAAiBvJ,EAAS,KAArD,SACE,cAAC,EAAD,YAIN,sBAAK+J,UAAWX,EAAQL,YAAxB,UACE,cAAC5H,EAAA,EAAD,CAAYE,QAAQ,KAApB,SACE,cAAC,IAAD,CACEE,GAAG,YACHE,eAAe,eACfD,YAAY,mBAGhB,gCACE,cAAC0I,EAAA,EAAD,CAAYtH,KAAK,QAAQE,QAAS,kBAAM6G,EAAmB,SAA3D,SACE,cAACQ,EAAA,EAAD,CAAUC,SAAS,YAErB,cAACF,EAAA,EAAD,CAAYtH,KAAK,QAAQE,QAAS,kBAAM6G,EAAmB,UAA3D,SACE,cAACU,GAAA,EAAD,CAAWD,SAAS,mBAIxBjB,GACA,cAACzG,EAAA,EAAD,CACEC,MAAO,CAAErB,UAAW,IACpBuB,QAAS,cAAC,IAAD,IACTmD,MAAM,UACN3E,QAAQ,WACRyB,QAASoG,EALX,SAOE,cAAC,IAAD,CACE3H,GAAG,cACHE,eAAe,cACfD,YAAY,2BCvGtBkH,GAAYC,aAAW,iBAAO,CAClCC,KAAM,CACJtC,MAAO,OACPC,OAAQ,QACR+D,QAAS,QAIAC,GAAM,WACjB,IAAMnB,EAAUV,KADO,EAEOtE,oBAAS,GAFhB,mBAEhB+E,EAFgB,KAEPvD,EAFO,OAGOxB,oBAAS,GAHhB,mBAGhBoG,EAHgB,KAGPC,EAHO,OCrBM,WAA8B,IAAD,EAC5BrG,oBAAS,GADmB,mBACjDsG,EADiD,KACzCC,EADyC,KAOxD,MAAO,CAACD,EAJa,WACnBC,GAAU,SAACC,GAAD,OAAWA,ODqBDC,GAJD,mBAIhB5B,EAJgB,KAIV/C,EAJU,KAmBvB,OAPA3B,qBAAU,WACHvB,QAAQvC,MAAqBuC,QAAQ/C,MACxC2F,GAAW,GAEb6E,GAAW,KACV,IAEED,EAKH,eAACM,EAAA,EAAD,CAAOC,QAAM,EAAChB,UAAWX,EAAQR,KAAjC,UACGO,EAAU,cAAC,EAAD,CAAiBvD,WAAYA,IAAiB,cAAC,EAAD,IACzD,cAAC,EAAD,CAAeM,QAASA,IACxB,cAAC,GAAD,CAAa+C,KAAMA,EAAM/C,QAASA,EAASgD,WArB5B,WjBOnB/I,aAAa6K,WAAW,SACxB7K,aAAa6K,WAAW,UiBNtB9E,IACAN,GAAW,IAkB0DuD,QAASA,OAPvE,cAAC,EAAD,K,UE/BL8B,GAAcjI,QACW,cAA7BkI,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DA0CnC,SAASC,GAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,+GAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,MC1FjEC,IAASC,OACP,cAAC,EAAD,UACE,cAACC,GAAA,EAAD,CAAsBC,aAAW,EAAjC,SACE,cAAC,GAAD,UACE,cAAC,GAAD,UAINC,SAASC,eAAe,SDQnB,SAAkBvB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIuB,IAAIC,SAAwB/B,OAAOC,SAAS+B,MACpDC,SAAWjC,OAAOC,SAASgC,OAIvC,OAGFjC,OAAOkC,iBAAiB,QAAQ,WAC9B,IAAM7B,EAAK,UAAM0B,SAAN,sBAEPhC,KAgEV,SAAiCM,EAAeC,GAE9C6B,MAAM9B,EAAO,CACX+B,QAAS,CAAE,iBAAkB,YAE5B1B,MAAK,SAAC2B,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5ClC,UAAUC,cAAckC,MAAMhC,MAAK,SAACC,GAClCA,EAAagC,aAAajC,MAAK,WAC7BV,OAAOC,SAAS2C,eAKpBxC,GAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IAAI,oEAtFV0B,CAAwBxC,EAAOC,GAI/BC,UAAUC,cAAckC,MAAMhC,MAAK,WACjCQ,QAAQC,IACN,+GAMJf,GAAgBC,EAAOC,OCjC/BwC,K","file":"static/js/main.a645acc7.chunk.js","sourcesContent":["export enum Languages {\n  RU = 'RU',\n  EN = 'EN',\n}\n","import { Languages } from '../types';\n\nexport const getMoneyFromLocalstorage = () => {\n  const money = localStorage.getItem('money');\n  if (money) {\n    return Number(money);\n  }\n  return null;\n};\n\nexport const saveMoneyToLocalstorage = (money: number | null) => {\n  if (money) {\n    localStorage.setItem('money', String(money));\n    return;\n  }\n  localStorage.setItem('money', '');\n};\n\nexport const getPaydayDate = (): Date | null => {\n  const payday = localStorage.getItem('payday');\n  if (payday) {\n    return new Date(payday);\n  }\n  return null;\n};\n\nexport const savePayDateToLocalstorage = (date: Date | null) => {\n  if (date) {\n    localStorage.setItem('payday', String(date));\n    return;\n  }\n\n  localStorage.setItem('payday', '');\n};\n\nexport const removeInfoFromLocalstorage = () => {\n  localStorage.removeItem('money');\n  localStorage.removeItem('payday');\n};\n\nexport const saveLanguageToLocalstorage = (language: Languages) => {\n  localStorage.setItem('moneyLanguage', language);\n};\n\nexport const getLanguageFromLocalstorage = ():Languages => {\n  const selectedLanguage = localStorage.getItem('moneyLanguage') as Languages;\n  if(selectedLanguage) {\n    return Languages[selectedLanguage] \n  }\n\n  return Languages['EN']\n};\n\nexport const saveThemeModeToLocalstorage = (mode: 'light' | 'dark') => {\n  localStorage.setItem('moneyThemeMode',mode)\n}\n\nexport const getThemeModeFromLocalstorage = (): 'light' | 'dark' => {\n  const mode = localStorage.getItem('moneyThemeMode') as 'light' | 'dark'\n  if(mode) {\n    return mode\n  }\n  return 'dark'\n}\n\n// TODO create one function for create, get and so on...","import { Typography } from '@mui/material';\nimport { Box } from '@mui/system';\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\ntype MoneyTillPaydayProps = {\n  moneyTillPayday: number;\n  daysTillPayday: number;\n  totalMoney: number | null;\n};\n\nexport const MoneyTillPayday: React.FC<MoneyTillPaydayProps> = ({\n  moneyTillPayday,\n  daysTillPayday,\n  totalMoney,\n}) => {\n  return (\n    <>\n      <Box display=\"flex\" flexDirection=\"column\">\n        {totalMoney && (\n          <>\n            <Typography align=\"center\" variant=\"h5\" marginTop={2}>\n              <FormattedMessage\n                id=\"money.total\"\n                description=\"Total amount of money\"\n                defaultMessage=\"Total amount of money\"\n              />\n            </Typography>\n            <Typography align=\"center\" variant=\"h2\">\n              {totalMoney}\n            </Typography>\n          </>\n        )}\n        <Typography align=\"center\" variant=\"h5\" marginTop={5}>\n          <FormattedMessage\n            id=\"money.spendEveryDay\"\n            description=\"Spend every next day\"\n            defaultMessage=\"Spend every next day\"\n          />\n        </Typography>\n        <Typography align=\"center\" variant=\"h2\">\n          {moneyTillPayday}\n        </Typography>\n      </Box>\n      <Box display=\"flex\" flexDirection=\"column\">\n        <Typography align=\"center\" variant=\"h5\" marginTop={5}>\n          <FormattedMessage\n            id=\"money.remainTillPayday\"\n            description=\"Remain days till payday\"\n            defaultMessage=\"Remain days till payday\"\n          />\n        </Typography>\n        <Typography align=\"center\" variant=\"h2\">\n          {daysTillPayday}\n        </Typography>\n      </Box>\n    </>\n  );\n};\n","import { Button, TextField, Typography } from '@mui/material';\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\nimport { Box } from '@mui/system';\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\ntype SpentMoneyPerDayProps = {\n  setSpentMoney: (money: number) => void;\n  onApplyMoney: () => void;\n  spentMoney: number | undefined;\n};\n\nexport const SpentMoneyPerDay: React.FC<SpentMoneyPerDayProps> = ({\n  setSpentMoney,\n  spentMoney = 0,\n  onApplyMoney,\n}) => {\n  const onSpentMoneyChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    setSpentMoney(Number(value));\n  };\n  return (\n    <>\n      <Typography marginBottom={1} marginTop={5}>\n        <FormattedMessage\n          id=\"money.spent\"\n          description=\"Enter the amount of money spent\"\n          defaultMessage=\"Enter the amount of money spent\"\n        />\n      </Typography>\n      <Box display=\"flex\" flexDirection=\"column\">\n        <TextField\n          label={\n            <FormattedMessage\n              id=\"money.spentLabel\"\n              description=\"was spent today...\"\n              defaultMessage=\"was spent today...\"\n            />\n          }\n          type=\"number\"\n          onChange={onSpentMoneyChange}\n          value={spentMoney ? spentMoney : ''}\n          inputProps={{\n            inputMode: 'numeric',\n            pattern: '[0-9]*',\n            min: '0',\n          }}\n        />\n        <Button\n          style={{ marginTop: 20 }}\n          variant=\"contained\"\n          size=\"small\"\n          endIcon={<CheckCircleIcon />}\n          onClick={onApplyMoney}\n          disabled={!Boolean(spentMoney) || spentMoney < 0}\n        >\n          <FormattedMessage id=\"money.spentApply\" defaultMessage=\"Apply\" description=\"Apply\"/>\n        </Button>\n      </Box>\n    </>\n  );\n};\n","import { getMoneyFromLocalstorage, getPaydayDate } from './localStorage';\n\nexport function dateDiffInDays(a: Date, b: Date) {\n  // Discard the time and time-zone information.\n  const utc1 = Date.UTC(a.getFullYear(), a.getMonth(), a.getDate());\n  const utc2 = Date.UTC(b.getFullYear(), b.getMonth(), b.getDate());\n\n  return Math.floor((utc2 - utc1) / (1000 * 3600 * 24));\n}\n\nexport const getDaysTillPayday = () => {\n  const todayDate = new Date();\n  const payDate = getPaydayDate();\n  if (todayDate && payDate) {\n    return dateDiffInDays(todayDate, payDate);\n  }\n  return 0;\n};\n\nexport const calcMoneyPerDay = () => {\n  const todayDate = new Date();\n  const payDate = getPaydayDate();\n  const moneyTillpayday = getMoneyFromLocalstorage();\n  if (payDate && moneyTillpayday) {\n    const diffInDays = dateDiffInDays(todayDate, payDate);\n    return Math.floor(moneyTillpayday / diffInDays);\n  }\n  return 0;\n};\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nexport const Loading = () => {\n  return (\n    <FormattedMessage\n      id=\"app.loading\"\n      defaultMessage=\"Loading...\"\n      description=\"Loading app\"\n    />\n  );\n};\n","import { Box } from '@mui/system';\nimport React from 'react';\nimport {\n  getMoneyFromLocalstorage,\n  saveMoneyToLocalstorage,\n} from '../../utils/localStorage';\nimport { MoneyTillPayday } from './MoneyTillPayday';\nimport { SpentMoneyPerDay } from './SpentMoneyPerDay';\nimport { calcMoneyPerDay, getDaysTillPayday } from '../../utils/helper';\nimport { Loading } from '../Loading';\n\ntype DayInfoProps = {\n};\n\nexport const DayInfo: React.FC<DayInfoProps> = () => {\n  const [spentMoney, setSpentMoney] = React.useState<number>();\n  const [moneyTillPayday, setMoneyTillPayday] = React.useState<number>();\n\n  const daysTillPayday = getDaysTillPayday();\n  const totalMoney = getMoneyFromLocalstorage();\n\n  const onApplyMoney = () => {\n    const moneyTillpayday = getMoneyFromLocalstorage();\n    if (moneyTillpayday && spentMoney) {\n      const moneyDiff = moneyTillpayday - spentMoney;\n      saveMoneyToLocalstorage(moneyDiff);\n      setMoneyTillPayday(calcMoneyPerDay());\n      setSpentMoney(undefined);\n    }\n  };\n\n  React.useEffect(() => {\n    setMoneyTillPayday(calcMoneyPerDay());\n  }, []);\n\n  if (moneyTillPayday === undefined) {\n    return <Loading />;\n  }\n\n  return (\n    <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n      <div>\n        <MoneyTillPayday\n          daysTillPayday={daysTillPayday}\n          moneyTillPayday={moneyTillPayday}\n          totalMoney={totalMoney}\n        />\n        <SpentMoneyPerDay\n          onApplyMoney={onApplyMoney}\n          setSpentMoney={setSpentMoney}\n          spentMoney={spentMoney}\n        />\n      </div>\n    </Box>\n  );\n};\n","import React, { FC } from 'react';\nimport TextField from '@mui/material/TextField';\nimport MobileDatePicker from '@mui/lab/DatePicker';\nimport { Typography } from '@mui/material';\nimport { FormattedMessage } from 'react-intl';\n\ntype PickerPayloadDateProps = {\n  payday: Date | null;\n  setPayday: (date: Date | null) => void;\n  setValidateError: (arg: boolean) => void;\n};\n\nexport const PickerPayloadDate: FC<PickerPayloadDateProps> = ({\n  payday,\n  setPayday,\n  setValidateError,\n}) => {\n  const onChangePayday = (date: Date | null) => {\n    setPayday(date);\n  };\n\n  const onError = (res: any) => {\n    if (res) {\n      setValidateError(true);\n    }\n    if (!res) {\n      setValidateError(false);\n    }\n  };\n\n  return (\n    <>\n      <Typography marginBottom={1}>\n        <FormattedMessage\n          id=\"datePicker.payday\"\n          description=\"Select your next payday\"\n          defaultMessage=\"Select your next payday: \"\n        />\n      </Typography>\n      <MobileDatePicker\n        label={<FormattedMessage id=\"datePicker.label\" description=\"Payday\" defaultMessage=\"Payday\"/>}\n        value={payday}\n        onChange={onChangePayday}\n        okText={<FormattedMessage id=\"datePicker.okButton\" description=\"Select\" defaultMessage=\"Select\"/>}\n        cancelText=\"\"\n        clearText={<FormattedMessage id=\"datePicker.clearButton\" description=\"Clear\" defaultMessage=\"Clear\"/>}\n        clearable\n        onError={onError}\n        disableHighlightToday\n        renderInput={(params) => <TextField fullWidth required {...params} />}\n      />\n    </>\n  );\n};\n","import { TextField, Typography } from '@mui/material';\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\ntype MoneyProps = {\n  money: number | undefined;\n  setMoney: (number: number) => void;\n};\n\nexport const Money: React.FC<MoneyProps> = ({ money, setMoney }) => {\n  const onMoneyChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    setMoney(Number(value));\n  };\n  return (\n    <>\n      <Typography marginBottom={1} marginTop={2}>\n        <FormattedMessage\n          id=\"money.available\"\n          defaultMessage=\"Enter the amount of money available\"\n          description=\"Enter the amount of money available\"\n        />\n      </Typography>\n      <TextField\n        required\n        onChange={onMoneyChange}\n        value={money ? money : ''}\n        type=\"number\"\n        label={\n          <FormattedMessage\n            id=\"money.label\"\n            defaultMessage=\"Money till payday\"\n            description=\"Money till payday\"\n          />\n        }\n        fullWidth\n        inputProps={{\n          inputMode: 'numeric',\n          pattern: '[0-9]*',\n          min: '0',\n        }}\n      />\n    </>\n  );\n};\n","import { Button } from '@mui/material';\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport {\n  saveMoneyToLocalstorage,\n  savePayDateToLocalstorage,\n} from '../../utils/localStorage';\nimport { PickerPayloadDate } from './DatePicker';\nimport { Money } from './Money';\n\ntype SetupComponentProps = {\n  setIsSetup: (arg: boolean) => void;\n};\n\nexport const SetupComponents: React.FC<SetupComponentProps> = ({\n  setIsSetup,\n}) => {\n  const [money, setMoney] = React.useState<number>(0);\n  const [validateError, setValidateError] = React.useState(false);\n  const [payday, setPayday] = React.useState<Date | null>(null);\n\n  const disabledStartButton =\n    !Boolean(money) || money < 0 || !Boolean(payday) || validateError;\n\n  const onSurveyStart = () => {\n    if (money && payday) {\n      savePayDateToLocalstorage(payday);\n      saveMoneyToLocalstorage(money);\n      setIsSetup(false);\n    }\n  };\n\n  return (\n    <div>\n      <PickerPayloadDate\n        setPayday={setPayday}\n        payday={payday}\n        setValidateError={setValidateError}\n      />\n      <Money setMoney={setMoney} money={money} />\n      <Button\n        style={{ margin: 'auto', marginTop: 50, display: 'block' }}\n        color=\"primary\"\n        variant=\"outlined\"\n        onClick={onSurveyStart}\n        fullWidth\n        disabled={disabledStartButton}\n      >\n        <FormattedMessage\n          id=\"setup.button\"\n          defaultMessage=\"Go ahead to survive\"\n          description=\"Go ahead to survive\"\n        />\n      </Button>\n    </div>\n  );\n};\n","import { Button } from '@mui/material';\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport SettingsIcon from '@mui/icons-material/Settings';\n\ntype SettingButtonProps = {\n  setOpen: () => void;\n};\n\nexport const SettingButton: React.FC<SettingButtonProps> = ({ setOpen }) => {\n  return (\n    <Button\n      endIcon={<SettingsIcon />}\n      style={{ marginTop: 50 }}\n      color=\"info\"\n      variant=\"outlined\"\n      fullWidth\n      onClick={setOpen}\n    >\n      <FormattedMessage\n        id=\"app.settings\"\n        defaultMessage=\"Settings\"\n        description=\"Settings\"\n      />\n    </Button>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/ru.143e2d2b.png\";","import React from 'react'\nimport ruImage from '../../assets/ru.png';\n\nexport const RussianIcon = () => {\n    return (\n        <img src={ruImage} style={{width: 50, height: 50}} alt=\"Russian\"/>\n    )\n}\n","export default __webpack_public_path__ + \"static/media/en.5233f022.png\";","import React from 'react'\nimport enImage from '../../assets/en.png';\n\nexport const EnglishIcon = () => {\n    return (\n        <img src={enImage} style={{width: 50, height: 50}} alt=\"English\"/>\n    )\n}\n","import React from 'react';\nimport { Languages } from '../types';\nimport { getLanguageFromLocalstorage } from '../utils/localStorage';\nimport languages from '../language/language.json';\nimport { IntlProvider } from 'react-intl';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport ruLocale from 'date-fns/locale/ru';\nimport enLocale from 'date-fns/locale/en-US';\n\nexport const TranslationContext = React.createContext<any>(() => {});\n\nexport const TranslationProvider: React.FC = ({ children }) => {\n  const languageFromLocalStorage = getLanguageFromLocalstorage();\n  const [selectedLanguage, setSelectedLanguage] = React.useState<Languages>(\n    languageFromLocalStorage\n  );\n\n  const dateLocale = selectedLanguage === Languages['EN'] ? enLocale : ruLocale\n\n  return (\n    <LocalizationProvider dateAdapter={AdapterDateFns} locale={dateLocale}>\n      <IntlProvider\n        locale={selectedLanguage}\n        messages={languages[selectedLanguage]}\n      >\n        <TranslationContext.Provider value={setSelectedLanguage}>\n          {children}\n        </TranslationContext.Provider>\n      </IntlProvider>\n    </LocalizationProvider>\n  );\n};\n","import { ThemeProvider, createTheme } from '@mui/material/styles';\nimport React from 'react';\nimport { getThemeModeFromLocalstorage } from './utils/localStorage';\n\nexport const ThemeContext = React.createContext({\n  toggleColorMode: (mode: 'light' | 'dark') => {},\n});\n\nexport const ColorThemeProvider: React.FC = ({ children }) => {\n  const themeFromLocalstorage = getThemeModeFromLocalstorage();\n  const [themeMode, setThemeMode] = React.useState<'light' | 'dark'>(\n    themeFromLocalstorage\n  );\n\n  const colorMode = React.useMemo(\n    () => ({\n      toggleColorMode: (mode: 'light' | 'dark') => {\n        setThemeMode(mode);\n      },\n    }),\n    []\n  );\n\n  const theme = React.useMemo(\n    () =>\n      createTheme({\n        palette: {\n          mode: themeMode,\n        },\n      }),\n    [themeMode]\n  );\n\n  return (\n    <ThemeContext.Provider value={colorMode}>\n      <ThemeProvider theme={theme}>{children}</ThemeProvider>;\n    </ThemeContext.Provider>\n  );\n};\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  IconButton,\n  Typography,\n} from '@mui/material';\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport RestartAltIcon from '@mui/icons-material/RestartAlt';\nimport { Box } from '@mui/system';\nimport { makeStyles } from '@mui/styles';\nimport { RussianIcon } from '../LanguageIcons/RussianIcon';\nimport { EnglishIcon } from '../LanguageIcons/EnglishIcon';\nimport { TranslationContext } from '../TranslationProvider';\nimport { Languages } from '../../types';\nimport { saveLanguageToLocalstorage, saveThemeModeToLocalstorage } from '../../utils/localStorage';\nimport { DarkMode, LightMode } from '@mui/icons-material';\nimport { ThemeContext } from '../../ColorThemeProvider';\n\nconst useStyles = makeStyles(() => ({\n  root: { paddingTop: 10 },\n  selectLanguage: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  selectTheme: {\n    marginTop: 20,\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n}));\n\ntype DialogModalProps = {\n  open: boolean;\n  isSetup: boolean;\n  setOpen: () => void;\n  onResetApp: () => void;\n};\n\nexport const DialogModal: React.FC<DialogModalProps> = ({\n  setOpen,\n  open,\n  onResetApp,\n  isSetup,\n}) => {\n  const classes = useStyles();\n  const setLagnuage = React.useContext(TranslationContext);\n  const {toggleColorMode} = React.useContext(ThemeContext)\n\n  const onChangeLanguage = (lang: Languages) => {\n    saveLanguageToLocalstorage(lang);\n    setLagnuage(lang);\n  };\n\n  const onChangeThemeColor = (mode: 'light' | 'dark') => {\n    saveThemeModeToLocalstorage(mode);\n    toggleColorMode(mode);\n  };\n\n  return (\n    <Dialog open={open} onClose={setOpen} fullWidth className={classes.root}>\n      <Typography align=\"center\" variant=\"h5\" paddingTop={2}>\n        <FormattedMessage\n          id=\"app.settings\"\n          defaultMessage=\"Settings\"\n          description=\"Settings\"\n        />\n      </Typography>\n      <DialogActions style={{ justifyContent: 'center', marginTop: 20 }}>\n        <Box display=\"flex\" flexDirection=\"column\">\n          <div className={classes.selectLanguage}>\n            <Typography variant=\"h6\">\n              <FormattedMessage\n                id=\"app.language\"\n                defaultMessage=\"Select language\"\n                description=\"Select language\"\n              />\n            </Typography>\n            <div>\n              <IconButton onClick={() => onChangeLanguage(Languages['RU'])}>\n                <RussianIcon />\n              </IconButton>\n              <IconButton onClick={() => onChangeLanguage(Languages['EN'])}>\n                <EnglishIcon />\n              </IconButton>\n            </div>\n          </div>\n          <div className={classes.selectTheme}>\n            <Typography variant=\"h6\">\n              <FormattedMessage\n                id=\"app.theme\"\n                defaultMessage=\"Select theme\"\n                description=\"Select theme\"\n              />\n            </Typography>\n            <div>\n              <IconButton size=\"large\" onClick={() => onChangeThemeColor('dark')}>\n                <DarkMode fontSize='large'/>\n              </IconButton>\n              <IconButton size=\"large\" onClick={() => onChangeThemeColor('light')}>\n                <LightMode fontSize='large'/>\n              </IconButton>\n            </div>\n          </div>\n          {!isSetup && (\n            <Button\n              style={{ marginTop: 50 }}\n              endIcon={<RestartAltIcon />}\n              color=\"warning\"\n              variant=\"outlined\"\n              onClick={onResetApp}\n            >\n              <FormattedMessage\n                id=\"app.restart\"\n                defaultMessage=\"Restart app\"\n                description=\"Restart app\"\n              />\n            </Button>\n          )}\n        </Box>\n      </DialogActions>\n    </Dialog>\n  );\n};\n","import { Paper } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\nimport React, { useState, useEffect } from 'react';\nimport { DayInfo } from './components/dayInfo/DayInfo';\nimport { SetupComponents } from './components/setupComponents/SetupComponents';\nimport {\n  getMoneyFromLocalstorage,\n  getPaydayDate,\n  removeInfoFromLocalstorage,\n} from './utils/localStorage';\nimport { Loading } from './components/Loading';\nimport { SettingButton } from './components/SettingButton';\nimport { DialogModal } from './components/dialog/DialogModal';\nimport { useToggleDialog } from './components/hooks/useToggleDialog';\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    width: '100%',\n    height: '100vh',\n    padding: 10,\n  },\n}));\n\nexport const App = () => {\n  const classes = useStyles();\n  const [isSetup, setIsSetup] = useState(false);\n  const [initApp, setInitApp] = useState(false);\n  const [open, setOpen] = useToggleDialog();\n\n  const onResetApp = () => {\n    removeInfoFromLocalstorage();\n    setOpen()\n    setIsSetup(true);\n  };\n\n  useEffect(() => {\n    if (!Boolean(getPaydayDate()) && !Boolean(getMoneyFromLocalstorage())) {\n      setIsSetup(true);\n    }\n    setInitApp(true);\n  }, []);\n\n  if (!initApp) {\n    return <Loading />;\n  }\n\n  return (\n    <Paper square className={classes.root}>\n      {isSetup ? <SetupComponents setIsSetup={setIsSetup} /> : <DayInfo />}\n      <SettingButton setOpen={setOpen} />\n      <DialogModal open={open} setOpen={setOpen} onResetApp={onResetApp} isSetup={isSetup}/>\n    </Paper>\n  );\n};\n","import {useState} from 'react'\n\nexport const useToggleDialog = (): [boolean, () => void] => {\n    const [dialog, setDialog] = useState(false);\n\n    const toggleDialog = () => {\n      setDialog((prev) => !prev);\n    };\n  \n    return [dialog, toggleDialog];\n  \n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport { StyledEngineProvider } from '@mui/material/styles';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport { TranslationProvider } from './components/TranslationProvider';\nimport { ColorThemeProvider } from './ColorThemeProvider';\n\nReactDOM.render(\n  <TranslationProvider>\n    <StyledEngineProvider injectFirst>\n      <ColorThemeProvider>\n        <App />\n      </ColorThemeProvider>\n    </StyledEngineProvider>\n  </TranslationProvider>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}